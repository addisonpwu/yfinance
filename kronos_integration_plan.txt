### Kronos 項目整合計劃

**目標**: 將 `yfinace` 股票篩選器的結果與 `Kronos` 項目的預測模型 `prediction_hk.py` 進行整合。

---

### 第一部分：高階整合步驟

1.  **定位修改點**:
    -   核心修改點為 `yfinace/analysis/analyzer.py` 文件中的 `run_analysis` 函數。
    -   在股票通過策略篩選後 (`if passed_strategies:` 塊內)，觸發預測流程。

2.  **調用預測腳本**:
    -   使用 `run_shell_command` 工具執行 `prediction_hk.py` 腳本，並傳入股票代碼。

3.  **整合預測結果**:
    -   捕獲預測腳本的輸出，並將其存儲到最終的結果列表中。

4.  **更新輸出報告**:
    -   修改 `yfinace/main.py` 文件，將捕獲到的預測結果添加到生成的詳細報告中。

---

### 第二部分：詳細代碼改造方案 (基於假設)

**⚠️ 重要前提：** 此代碼方案**強烈依賴**以下假設。在實際執行前，您**必須**根據 `prediction_hk.py` 的真實情況進行調整：

-   **假設1：腳本路徑** - 假設 `prediction_hk.py` 的絕對路徑是 `/Users/addison/Develop/Kronos/scripts/prediction_hk.py`。您需要將其替換為**真實路徑**。
-   **假設2：執行方式** - 假設腳本的調用方式為 `python3 <腳本路徑> <股票代碼>`。
-   **假設3：輸出格式** - 假設腳本會將單行的預測結果（如 `看漲` 或 `88.5`）直接打印到標準輸出 (stdout)。

#### **改造任務 1: 修改 `analysis/analyzer.py` (核心邏輯)**

1.  **目標文件**: `analysis/analyzer.py`
2.  **目標函數**: `run_analysis`
3.  **定位**: 在 `if passed_strategies:` 代碼塊內部，`qualified_stocks.append({...})` 語句**之前**。

4.  **修改方案**: 插入調用外部腳本的代碼，捕獲並處理結果，然後將結果存入 `qualified_stocks` 列表。

5.  **建議代碼**:

    ```python
    # ... 在 run_analysis 函數的 for 循環內部
            if passed_strategies:
                # --- ▼▼▼ 新增代碼塊：調用 Kronos 預測 ▼▼▼ ---
                kronos_prediction = "N/A" # 默認值
                # ! 請務必確認並修改為 Kronos 項目的真實路徑
                KRONOS_SCRIPT_PATH = "/Users/addison/Develop/Kronos/scripts/prediction_hk.py"

                # 假設 prediction_hk.py 是港股專用腳本
                if market.upper() == 'HK':
                    try:
                        # 構建並執行命令
                        command = f"python3 {KRONOS_SCRIPT_PATH} {symbol}"
                        prediction_result = default_api.run_shell_command(command)
                        
                        # 檢查命令是否成功執行，並提取標準輸出
                        if prediction_result.get('exit_code') == 0 and prediction_result.get('stdout'):
                            kronos_prediction = prediction_result['stdout'].strip()
                        else:
                            # 如果腳本執行失敗，記錄錯誤信息
                            error_output = prediction_result.get('stderr', '').strip()
                            kronos_prediction = f"預測失敗: {error_output}"

                    except Exception as pred_e:
                        kronos_prediction = f"調用外部腳本時出錯: {pred_e}"
                # --- ▲▲▲ 新增代碼塊結束 ▲▲▲ ---

                exchange = info.get('exchange', 'UNKNOWN')
                qualified_stocks.append({
                    'symbol': symbol,
                    'exchange': exchange,
                    'strategies': passed_strategies,
                    'info': info,
                    'news': news,
                    'kronos_prediction': kronos_prediction # <-- 新增鍵值對
                })
                # 更新打印信息，立即顯示預測結果
                print(f"\r{' ' * 80}\r✅ {symbol} 符合策略: {passed_strategies}, Kronos預測: {kronos_prediction}")
    ```

#### **改造任務 2: 修改 `main.py` (更新報告)**

1.  **目標文件**: `main.py`
2.  **目標函數**: `main`
3.  **定位**: 在生成詳細報告的 `for stock in final_list:` 循環內部。

4.  **修改方案**: 從 `stock` 字典中獲取 `kronos_prediction` 的值，並將其加入到輸出字符串中。

5.  **建議代碼**:

    ```python
    # ... 在 main 函數的 for stock in final_list 循環內部
        info = stock.get('info', {})
        kronos_prediction = stock.get('kronos_prediction', 'N/A') # <-- 獲取預測值
        
        # ... (其他信息的格式化)

        detailed_output_lines.append(f"\n✅ {info.get('longName', stock['symbol'])} ({stock['symbol']})")
        detailed_output_lines.append(f"   - 符合策略: {stock['strategies']}")
        detailed_output_lines.append(f"   - Kronos 預測: {kronos_prediction}") # <-- 新增此行以顯示預測
        detailed_output_lines.append(f"   - 產業: {info.get('sector', 'N/A')} / {info.get('industry', 'N/A')}")
        detailed_output_lines.append(f"   - 市值: {market_cap_str}")
    # ... (繼續追加其他信息)
    ```

---

### 第三部分：下一步行動

請在明天執行此計劃時，向我提供 `prediction_hk.py` 的源代碼，或至少確認其**真實的絕對路徑**、**命令行參數**和**輸出格式**。我將可以立即為您生成並執行準確的 `replace` 命令，完成代碼的自動修改。